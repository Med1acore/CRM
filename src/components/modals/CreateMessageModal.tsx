import { useState } from 'react'
import { X, Send, Users, Calendar, Bot, FileText } from 'lucide-react'

interface CreateMessageModalProps {
  isOpen: boolean
  onClose: () => void
  onSave: (message: MessageData) => void
}

interface MessageData {
  title: string
  content: string
  recipients: string[]
  type: 'newsletter' | 'reminder' | 'invitation' | 'announcement'
  scheduleType: 'now' | 'scheduled'
  scheduledDate?: string
  scheduledTime?: string
}

type MessageErrors = Partial<Record<keyof MessageData, string>>

const recipientGroups = [
  { id: 'all', name: '–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏', count: 156 },
  { id: 'leaders', name: '–õ–∏–¥–µ—Ä—ã –≥—Ä—É–ø–ø', count: 8 },
  { id: 'youth', name: '–ú–æ–ª–æ–¥–µ–∂–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ', count: 23 },
  { id: 'families', name: '–°–µ–º–µ–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã', count: 45 },
  { id: 'children', name: '–î–µ—Ç—Å–∫–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ', count: 32 },
  { id: 'newcomers', name: '–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏', count: 12 }
]

const messageTypes = [
  { id: 'newsletter', name: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', icon: FileText },
  { id: 'reminder', name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', icon: Calendar },
  { id: 'invitation', name: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', icon: Users },
  { id: 'announcement', name: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ', icon: Send }
]

/**
 * Modal for composing or scheduling broadcast messages.
 */
export default function CreateMessageModal({ isOpen, onClose, onSave }: CreateMessageModalProps) {
  const [formData, setFormData] = useState<MessageData>({
    title: '',
    content: '',
    recipients: [],
    type: 'newsletter',
    scheduleType: 'now'
  })

  const [errors, setErrors] = useState<MessageErrors>({})
  const [isGenerating, setIsGenerating] = useState(false)

  const handleInputChange = (field: keyof MessageData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }))
    }
  }

  const handleRecipientToggle = (recipientId: string) => {
    setFormData(prev => ({
      ...prev,
      recipients: prev.recipients.includes(recipientId)
        ? prev.recipients.filter(id => id !== recipientId)
        : [...prev.recipients, recipientId]
    }))
  }

  const generateWithAI = async () => {
    setIsGenerating(true)
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ò–ò
    setTimeout(() => {
      const aiGeneratedContent = {
        title: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ü–µ—Ä–∫–≤–∏',
        content: `–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è!

–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–µ –±–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏–µ –≤ 11:00.

üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:
‚Ä¢ –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 19:00
‚Ä¢ –°–µ–º–µ–π–Ω—ã–π –¥–µ–Ω—å - —Å—É–±–±–æ—Ç–∞, 16:00
‚Ä¢ –î–µ—Ç—Å–∫–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 11:00

üôè –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã–µ –Ω—É–∂–¥—ã:
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ –Ω–∞—à–∏—Ö —Å–ª—É–∂–∏—Ç–µ–ª–µ–π
‚Ä¢ –ú–æ–ª–æ–¥—ã–µ —Å–µ–º—å–∏ –≤ —Ü–µ—Ä–∫–≤–∏
‚Ä¢ –ú–∏—Å—Å–∏–æ–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã

–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –≤–∞–º!
–ö–æ–º–∞–Ω–¥–∞ —Ü–µ—Ä–∫–≤–∏`
      }
      
      setFormData(prev => ({
        ...prev,
        title: aiGeneratedContent.title,
        content: aiGeneratedContent.content
      }))
      setIsGenerating(false)
    }, 2000)
  }

  const validateForm = (): boolean => {
    const newErrors: MessageErrors = {}

    if (!formData.title.trim()) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }

    if (!formData.content.trim()) {
      newErrors.content = '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    }

    if (formData.recipients.length === 0) {
      newErrors.recipients = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
    }

    if (formData.scheduleType === 'scheduled') {
      if (!formData.scheduledDate) {
        newErrors.scheduledDate = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏'
      }
      if (!formData.scheduledTime) {
        newErrors.scheduledTime = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏'
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (validateForm()) {
      onSave(formData)
      setFormData({
        title: '',
        content: '',
        recipients: [],
        type: 'newsletter',
        scheduleType: 'now'
      })
      setErrors({})
      onClose()
    }
  }

  const handleClose = () => {
    setFormData({
      title: '',
      content: '',
      recipients: [],
      type: 'newsletter',
      scheduleType: 'now'
    })
    setErrors({})
    onClose()
  }

  const getTotalRecipients = () => {
    return recipientGroups
      .filter((group) => formData.recipients.includes(group.id))
      .reduce((total, group) => total + group.count, 0)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
            –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </h2>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            </label>
            <div className="grid grid-cols-2 gap-3">
              {messageTypes.map((type) => (
                <button
                  key={type.id}
                  type="button"
                  onClick={() => handleInputChange('type', type.id)}
                  className={`p-3 rounded-lg border-2 text-left transition-colors ${
                    formData.type === type.id
                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <type.icon className="h-5 w-5 text-primary-600 mb-2" />
                  <p className="font-medium text-gray-900 dark:text-gray-100">
                    {type.name}
                  </p>
                </button>
              ))}
            </div>
          </div>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è *
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              className={`input w-full ${errors.title ? 'border-red-500' : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{errors.title}</p>
            )}
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ */}
          <div>
            <div className="flex items-center justify-between mb-2">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è *
              </label>
              <button
                type="button"
                onClick={generateWithAI}
                disabled={isGenerating}
                className="btn btn-secondary text-sm"
              >
                <Bot className="mr-1 h-4 w-4" />
                {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é...' : '–°–æ–∑–¥–∞—Ç—å —Å –ò–ò'}
              </button>
            </div>
            <textarea
              value={formData.content}
              onChange={(e) => handleInputChange('content', e.target.value)}
              className={`input w-full h-32 resize-none ${errors.content ? 'border-red-500' : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è..."
            />
            {errors.content && (
              <p className="mt-1 text-sm text-red-600">{errors.content}</p>
            )}
          </div>

          {/* –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ *
            </label>
            <div className="grid grid-cols-2 gap-3">
              {recipientGroups.map((group) => (
                <button
                  key={group.id}
                  type="button"
                  onClick={() => handleRecipientToggle(group.id)}
                  className={`p-3 rounded-lg border-2 text-left transition-colors ${
                    formData.recipients.includes(group.id)
                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900 dark:text-gray-100">
                        {group.name}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {group.count} —á–µ–ª–æ–≤–µ–∫
                      </p>
                    </div>
                    <Users className="h-5 w-5 text-gray-400" />
                  </div>
                </button>
              ))}
            </div>
            {formData.recipients.length > 0 && (
              <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <span className="font-semibold">{getTotalRecipients()}</span>
              </p>
            )}
            {errors.recipients && (
              <p className="mt-1 text-sm text-red-600">{errors.recipients}</p>
            )}
          </div>

          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            </label>
            <div className="space-y-3">
              <label className="flex items-center">
                <input
                  type="radio"
                  name="scheduleType"
                  value="now"
                  checked={formData.scheduleType === 'now'}
                  onChange={(e) => handleInputChange('scheduleType', e.target.value)}
                  className="mr-3"
                />
                <span className="text-gray-900 dark:text-gray-100">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å</span>
              </label>
              <label className="flex items-center">
                <input
                  type="radio"
                  name="scheduleType"
                  value="scheduled"
                  checked={formData.scheduleType === 'scheduled'}
                  onChange={(e) => handleInputChange('scheduleType', e.target.value)}
                  className="mr-3"
                />
                <span className="text-gray-900 dark:text-gray-100">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É</span>
              </label>
            </div>

            {formData.scheduleType === 'scheduled' && (
              <div className="mt-4 grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –î–∞—Ç–∞
                  </label>
                  <input
                    type="date"
                    value={formData.scheduledDate || ''}
                    onChange={(e) => handleInputChange('scheduledDate', e.target.value)}
                    min={new Date().toISOString().split('T')[0]}
                    className={`input w-full ${errors.scheduledDate ? 'border-red-500' : ''}`}
                  />
                  {errors.scheduledDate && (
                    <p className="mt-1 text-sm text-red-600">{errors.scheduledDate}</p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –í—Ä–µ–º—è
                  </label>
                  <input
                    type="time"
                    value={formData.scheduledTime || ''}
                    onChange={(e) => handleInputChange('scheduledTime', e.target.value)}
                    className={`input w-full ${errors.scheduledTime ? 'border-red-500' : ''}`}
                  />
                  {errors.scheduledTime && (
                    <p className="mt-1 text-sm text-red-600">{errors.scheduledTime}</p>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
            <button
              type="button"
              onClick={handleClose}
              className="btn btn-secondary"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="btn btn-primary"
            >
              <Send className="mr-2 h-4 w-4" />
              {formData.scheduleType === 'now' ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å' : '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}
